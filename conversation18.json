[
    {
        "user": "Imagine you are managing several robot agents, \"p3dx\", \"Kinova\", \"google_assistant\", \"tegra\" and every robot is available to assist. The selection of only these robots will depend on your capabilities.\n\n{  \n  \"p3dx\": {\n    \"description\": \"p3dx is a robot that can only move to a specific target and speak. It cannot manipulate objects or speak.\",\n    \"actions\": {\n      \"say\": {\n        \"description\": \"Allows p3dx to speak a text message.\",\n        \"syntax\": \"say('p3dx', text)\"\n      },\n      \"move\": {\n        \"description\": \"Moves p3dx to a specific target.\",\n        \"syntax\": \"moveto('p3dx', target)\"\n      }\n    },\n    \"limitations\": {\n      \"manipulate\": \"p3dx cannot manipulate objects.\",\n    }\n  },\n  \"google_assistant\": {\n    \"description\": \"google_assistant is a voice assistant . It can only control.\",\n    \"actions\": {\n      \"do\": {\n        \"description\":  \"Allows google_assistant to control a text message with voice commands.\",\n        \"syntax\": \"do('google_assistant', voice command)\"\n      }\n    },\n    \"limitations\": {\n      \"control\": \"google_assistant can only perform the following interactions: 'do' and the voice commands: 'turn_on,' 'turn_off' 'increase_the_volume' and 'decrease_the_volume'\".\n    }\n  },\n  \"kinova\": {\n    \"description\": \"kinova is a fixed robot arm that can manipulate specific objects but cannot move to other locations.\",\n    \"actions\": {\n      \"manipulate\": {\n        \"description\": \"Allows kinova to manipulate gummy bears.\",\n        \"syntax\": \"do('kinova', pick up, object)\"\n      }\n    },\n    \"limitations\": {\n      \"manipulate\": \"Kinova can only perform the following interaction: \"pick up\" only the \"red gummy bear\", \"green gummy bear\" or \"yellow gummy bear\" and then delivers it to kinova\"\n      \"speak\": \"kinova cannot speak.\"\n    }\n  },\n  \"tegra\": {\n    \"description\": \"Tegra is a screen that can only display text.\",\n    \"actions\": {\n      \"say\": {\n        \"description\":  \"Tegra can display text messages\",\n        \"syntax\": \"say('tegra', text)\"\n      }\n    },\n    \"limitations\": {\n      \"manipulate\": \"Tegra cannot manipulate objects.\",\n    }\n  }\n}\n\n_____________________________________________________\n\nInstructions for Responses:\nResponses should consist of a step-by-step sequence of functions describing all the commands required to complete the user's requested task. The allowed actions are limited to the following:\n\nMove to a location:\nUse the command moveto(agent, target) to move an agent to a specific location. Choose an \"agent\", and define the \"target\", which can be a room, another agent, or an object.\nExample: moveto(\"agent\", \"room1\")\n\nInteract with gummy bears:\nUse the function do to allow the agent to interact with gummy bears. Select an \"agent\", and ensure that the interactions are exclusively with gummy bears.\nExample: do(\"kinova\", \"pick up\", \"gummy bear\")\n\nInteract with tv:\nUse the do function to enable the agent to interact with the TV. Start by selecting the \"google_assistant\" option. Remember that this function has two parameters. It’s essential to first move to the \"google_assistant\" position and then return to the user's position.\nExample: do(\"google_assistant\", voice command)\n\nResponding to questions:\nTo respond to or ask a question, use say(\"p3dx\", text). Only \"p3dx\" can speak. If you are waiting for a response, always first ask for the user's name and then move to their location using moveto. If you don’t understand something, ask the user for clarification, but remember the information in the JSON.\nExample: say(\"p3dx\", \"What is your name?\")\n\nSet the trajectory based on the user's location:\nIf you know the user's name, set the trajectory to their position, which should be found in the agents' JSON. Always first ask for the user's name if it is not known and move to their location to continue the conversation.\nExample: moveto(\"p3dx\", \"room1\")\n\nIf the user requests a gummy bear:\nThe simplified procedure should be: moveto(\"p3dx\", \"kinova\"), then do(\"kinova\", \"pick up\", \"gummy bear\"), and finally moveto(\"p3dx\", \"user_location\"), where the gummy bear is delivered to the user.\n\nAdditional Considerations:\n\nFollow these instructions strictly, using only the mentioned commands: moveto(), do(), and say() in sequence to complete the action.\nIf you are unsure about an action, ask the user to confirm before proceeding.\nIf the agent cannot fulfill the user's request, ask another user for help using the say() command.\nExample: say(\"p3dx\", \"I cannot complete this task, could someone assist?\")\nImportant:\nDo not perform actions you don't understand or that are not clearly specified.\n\n\n\n_____________________________________________________\n\nCONTEXT UPDATE FOR ROBOTICS\n\nThis JSON file is an input that will be sent periodically to update the context for the robots. Each time this JSON is provided, it will contain crucial information that the robots must remember:\n\n\nAgents: Includes both human and robot agents, each with their name, location, and, for robots, the objects they can interact with and the types of interactions they are capable of performing.\nRooms: Each room includes its name, location, and a list of connected rooms, showing which rooms are directly linked to one another.\nObjects: Each object is defined by its type, location, and \"interactions,\"\n\nThese updates will reflect any relevant changes in the environment, ensuring that the robots have the most current information stored in their memory for appropriate interactions.\n\n\n\n{'agents': [{'type': 'human', 'name': {'prefix': 'professor', 'first_name': 'eric', 'last_name': 'rohmer'}, 'current_room': 'living room'}, {'type': 'human', 'name': {'prefix': 'student', 'first_name': 'felipe', 'last_name': 'mota'}, 'current_room': 'kitchen'}, {'type': 'human', 'name': {'prefix': 'student', 'first_name': 'Ervin', 'last_name': 'Bolivar'}, 'current_room': 'kitchen'}]}\n\n{'rooms': [{'name': 'kitchen', 'connections': ['living_room']}, {'name': 'living_room', 'connections': ['kitchen', 'bedroom']}, {'name': 'bedroom', 'connections': ['living_room']}]}\n\n{'objects': [{'name': 'sofa', 'localization': 'living_room', 'on_top': None, 'interactions': None}, {'name': 'tv', 'localization': 'living_room', 'on_top': 'cabinet_1', 'interactions': ['turn_off', 'increase the volume', 'decrease the volumen']}, {'name': 'cabinet_1', 'localization': 'living_room', 'on_top': 'cabinet_1', 'interactions': None}, {'name': 'cabinet_2', 'localization': 'kitchen', 'on_top': 'cabinet_2', 'interactions': None}, {'name': 'refrigerator', 'localization': 'kitchen', 'on_top': 'cabinet_1', 'interactions': None}, {'name': 'water_dispenser', 'localization': 'kitchen', 'on_top': 'cabinet_1', 'interactions': ['dispense water', 'refill']}, {'name': 'bed', 'localization': 'bedroom', 'on_top': 'cabinet_1', 'interactions': None}, {'name': 'microwave', 'localization': 'kicthen', 'on_top': 'cabinet_1', 'interactions': None}, {'name': 'dispenser', 'localization': 'living_room', 'on_top': 'cabinet_1', 'interactions': ['green gummy bear', 'red gummy bear', 'yellow gummy bear']}]}\n\n>> All of the above information that you will need.\n>> Are you ready to start the conversation?",
        "time": "2025-02-22 11:10:50"
    },
    {
        "user": "",
        "time": "2025-02-22 11:10:50"
    },
    {
        "user": "",
        "time": "2025-02-22 11:10:50"
    },
    {
        "assistant": "say(\"p3dx\", \"Hello! How can I assist you today?\")",
        "time": "2025-02-22 11:10:51"
    },
    {
        "user": "say(\"p3dx\", \"Hello! How can I assist you today?\")",
        "time": "2025-02-22 11:10:51"
    },
    {
        "assistant": "say(\"p3dx\", \"Hello! How can I assist you today?\")",
        "time": "2025-02-22 11:10:53"
    },
    {
        "user": "",
        "time": "2025-02-22 11:11:24"
    },
    {
        "user": "can you give me a green gummy bear",
        "time": "2025-02-22 11:11:24"
    },
    {
        "user": "can you give me a green gummy bear",
        "time": "2025-02-22 11:11:24"
    },
    {
        "assistant": "say(\"p3dx\", \"What is your name?\")",
        "time": "2025-02-22 11:11:25"
    },
    {
        "user": "say(\"p3dx\", \"What is your name?\")",
        "time": "2025-02-22 11:11:25"
    },
    {
        "assistant": "say(\"p3dx\", \"What is your name?\")",
        "time": "2025-02-22 11:11:27"
    }
]